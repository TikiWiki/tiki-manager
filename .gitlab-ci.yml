include:
  - local: '/.gitlab-ci/stage-functional-tests-local-git.yml'
  - template: Code-Quality.gitlab-ci.yml

image: xorti/tiki-devops:php-8.1-qa

variables:
  MYSQL_ROOT_PASSWORD: secret
  COMPOSER_CACHE_DIR: "$CI_PROJECT_DIR/.composercache"
  COMPOSER_FLAGS: '--ansi --no-progress --prefer-dist -n'
  SVN_SCHEDULER_NAME: 'test-tiki-manager-svn'
  SRC_SCHEDULER_NAME: 'test-tiki-manager-src'
  INSTANCE_TYPE_SSH: 'ssh'
  INSTANCE_TYPE_FTP: 'ftp'

stages:
  - build
  - quality
  - unit-tests
  - pre-functional-tests
  - functional-tests
  - package
  - vendors_update

.composer-cache:
  cache: &composer-cache
    key: cache-tiki-manager
    paths:
      - vendor/
      - vendor-bin/
      - .composercache/files
  artifacts:
    paths:
      - vendor/
      - vendor-bin/
    when: on_success
    expire_in: 1h

.install-composer-script: &install-composer-script
  - composer install $COMPOSER_FLAGS
  - composer bin all install $COMPOSER_FLAGS

.update-composer-script: &update-composer-script
  - composer update $COMPOSER_FLAGS

.git-config: &git-config
  - git config --global user.email "${GITLAB_USER_EMAIL}"
  - git config --global user.name "${GITLAB_USER_NAME}"
  - git config --global --add safe.directory "*"

composer:
  stage: build
  script:
    *install-composer-script
  cache:
    <<: *composer-cache

#
# Lint
#

.lint-scripts: &lint-scripts
  stage: quality
  script:
    - git log -m --first-parent -1 --name-only --diff-filter=d --pretty="format:" | grep -v "^$" | sort -u | grep '\.php$' - 2>&1 > /dev/null || { git log -m -1 --name-only && echo && echo 'No files to be processed. Skipping...' && echo && exit 0; }
    - git log -m -1 --name-only
    - git log -m --first-parent -1 --name-only --diff-filter=d --pretty="format:" | grep -v "^$" | sort -u | xargs -L 1 php -l
  needs: [ ]
  allow_failure: false

lint-scripts-php74:
  image: xorti/tiki-devops:php-7.4-qa
  <<: *lint-scripts

lint-scripts-php80:
  image: xorti/tiki-devops:php-8.0-qa
  <<: *lint-scripts

lint-scripts-php81:
  image: xorti/tiki-devops:php-8.1-qa
  <<: *lint-scripts

phpcs:
  stage: quality
  script:
    - *install-composer-script
    - git log -m --first-parent -1 --name-only --diff-filter=d --pretty="format:" | grep -v "^$" | sort -u | grep '\.php$' - 2>&1 > /dev/null || { git log -m -1 --name-only && echo && echo 'No files to be processed. Skipping...' && echo && exit 0; }
    - git log -m -1 --name-only
    - git log -m --first-parent -1 --name-only --diff-filter=d --pretty="format:" | grep -v "^$" | sort -u | xargs php vendor/squizlabs/php_codesniffer/bin/phpcs -s --runtime-set ignore_warnings_on_exit true
  allow_failure: true
  needs:
    - composer
  cache:
    <<: *composer-cache
    policy: pull
  only:
    - master

phpcs-branches:
  stage: quality
  variables:
    SBRANCH: "master"
  script:
    - *install-composer-script
    - git diff --name-status origin/$SBRANCH | grep -v "^D" | cut -c 3- | sort -u | grep '\.php$' - 2>&1 > /dev/null || { git diff --name-status origin/$SBRANCH && echo && echo 'No files to be processed. Skipping...' && echo && exit 0; }
    - git diff --name-status origin/$SBRANCH
    - git diff --name-status origin/$SBRANCH | grep -v "^D" | sed -r 's/^R[0-9]+\t(.*)\t(.*)$/R\t\2/' |  cut -c 3- | xargs php vendor/squizlabs/php_codesniffer/bin/phpcs -s --runtime-set ignore_warnings_on_exit true
  allow_failure: true
  needs:
    - composer
  cache:
    <<: *composer-cache
    policy: pull
  except:
    - master

code_quality:
  stage: quality
  artifacts:
    reports:
      codequality: gl-code-quality-report.json

#----------------------------------------------------------------------------------------------------------------------#
# UNIT TESTS SECTION
#----------------------------------------------------------------------------------------------------------------------#

.unit-tests: &unit-tests
  stage: unit-tests
  services:
    - name: mysql:5.6
      alias: mysql
  script:
    - XDEBUG_MODE=coverage ./vendor/bin/simple-phpunit tests/ --group unit --coverage-text --colors=never --log-junit report.xml
  needs:
    - composer
  cache:
    <<: *composer-cache
    policy: pull
  allow_failure: false
  coverage: '/^\s*Lines:\s*\d+.\d+\%/'
  artifacts:
    when: always
    reports:
      junit: report.xml

.unit-tests-composer-install: &unit-tests-composer-install
  before_script:
    - echo 'APP_ENV=gitlab-ci' >> .env
    - ssh-keygen -t rsa -f ./data/id_rsa -q -P ""
    - *install-composer-script
    - composer build-phar
  <<: *unit-tests

.unit-tests-composer-update: &unit-tests-composer-update
  before_script:
    - echo 'APP_ENV=gitlab-ci' >> .env
    - ssh-keygen -t rsa -f ./data/id_rsa -q -P ""
    - *update-composer-script
    - *install-composer-script
    - composer build-phar
  <<: *unit-tests

unit-tests-php74:
  image: xorti/tiki-devops:php-7.4-qa
  <<: *unit-tests-composer-update

unit-tests-php80:
  image: xorti/tiki-devops:php-8.0-qa
  <<: *unit-tests-composer-update

unit-tests-php81:
  image: xorti/tiki-devops:php-8.1-qa
  <<: *unit-tests-composer-install

#----------------------------------------------------------------------------------------------------------------------#
# FUNCTIONAL TESTS SECTION
#----------------------------------------------------------------------------------------------------------------------#
.tiki-manager-cache:
  cache: &tiki-manager-cache
    key: cache-tiki-$VCS
    paths:
      - cache/
      - vendor/
      - vendor-bin/
      - ${COMPOSER_CACHE_DIR}/files

.cache-warmup-tiki:
  image: xorti/tiki-devops:php-7.4-qa
  stage: pre-functional-tests
  before_script:
    - source .env.gitlab-ci
    - *update-composer-script
    - *install-composer-script
  cache:
    <<: *tiki-manager-cache
  needs:
    - composer
  dependencies:
    - composer

cache-warmup-tiki-git:
  extends: .cache-warmup-tiki
  variables:
    VCS: git
  script:
    - *git-config
    - TIKI_CACHE=cache/tiki-git-$PREV_VERSION_BRANCH
    - |
      if [ ! -d "$TIKI_CACHE" ]; then
        git clone --depth 1 -b $PREV_VERSION_BRANCH $GIT_TIKIWIKI_URI $TIKI_CACHE;
      else
        git -C $TIKI_CACHE pull
      fi;
    - composer install -d $TIKI_CACHE/vendor_bundled $COMPOSER_FLAGS --no-dev
  except:
    refs:
      - schedules
    variables:
      - $SCHEDULER == $SVN_SCHEDULER_NAME
      - $SCHEDULER == $SRC_SCHEDULER_NAME

cache-warmup-tiki-svn:
  extends: .cache-warmup-tiki
  variables:
    VCS: svn
  script:
    - TIKI_CACHE=cache/tiki-svn-branches_$PREV_VERSION_BRANCH
    - |
      if [ ! -d "$TIKI_CACHE" ]; then
        svn checkout $SVN_TIKIWIKI_URI/branches/$PREV_VERSION_BRANCH $TIKI_CACHE
      else
        cd $TIKI_CACHE && svn up
      fi;
    - composer install -d $TIKI_CACHE/vendor_bundled $COMPOSER_FLAGS --no-dev
  only:
    refs:
      - schedules
    variables:
      - $SCHEDULER == $SVN_SCHEDULER_NAME

download-tiki-src-files:
  extends: .cache-warmup-tiki
  script:
    - |
      SRC_PATH='data/tiki_src/' &&\
      if [ ! -f "${SRC_PATH}tiki-${LATEST_SRC_RELEASE}.tar.gz" ]; then wget -nv --directory-prefix=${SRC_PATH} ${URL_LATEST_SRC_RELEASE}; fi; \
      if [ ! -f "${SRC_PATH}tiki-${PREV_SRC_MINOR_RELEASE}.tar.gz" ]; then wget -nv --directory-prefix=${SRC_PATH} ${URL_PREV_SRC_MINOR_RELEASE}; fi; \
      if [ ! -f "${SRC_PATH}tiki-${PREV_SRC_MAJOR_RELEASE}.tar.gz" ]; then wget -nv --directory-prefix=${SRC_PATH} ${URL_PREV_SRC_MAJOR_RELEASE}; fi;
  cache:
    paths:
        - data/tiki_src/
        - cache/
        - vendor/
        - vendor-bin/
        - .composercache/files
  artifacts:
    name: tiki-src
    paths:
      - data/tiki_src/
    when: on_success
  only:
    refs:
      - schedules
    variables:
      - $SCHEDULER == $SRC_SCHEDULER_NAME

#----------------------------------------------------------------------------------------------------------------------#
# FUNCTIONAL TESTS SECTION
#----------------------------------------------------------------------------------------------------------------------#

.setup-env: &setup-env
  - VCS=${VCS:-$DEFAULT_PHP_VERSION}
  - echo APP_ENV=gitlab-ci >> .env
  - echo DEFAULT_VCS=$VCS >> .env
  - cat .env

.setup-keys: &setup-keys
  - ssh-keygen -t rsa -f ./data/id_rsa -q -P ""


.template-tiki-manager-commands: &template-tiki-manager-commands
  image: xorti/tiki-devops:php-all-qa
  stage: functional-tests
  services:
    - name: mysql:5.6
      alias: mysql
  before_script:
    - *setup-env
    - *setup-keys
    - source .env.gitlab-ci
    # Use PHP_VERSION variable to use a different version
    - PHP_VERSION=${PHP_VERSION:-$DEFAULT_PHP_VERSION}
    - rm /etc/alternatives/php && ln -s /usr/bin/php${PHP_VERSION} /etc/alternatives/php
    - php -v
    - *update-composer-script
    - *install-composer-script
  script:
    - ./vendor/bin/simple-phpunit tests/Command/$TEST_FILE
  cache:
    <<: *tiki-manager-cache
    policy: pull
  allow_failure: false

.template-tiki-manager-commands-git: &template-tiki-manager-commands-git
  <<: *template-tiki-manager-commands
  variables:
    VCS: git
  dependencies:
    - cache-warmup-tiki-git
  needs:
    - cache-warmup-tiki-git
  before_script:
    - !reference [ .template-tiki-manager-commands, before_script ]
    - *git-config
  except:
    variables:
      - $SCHEDULER == $SVN_SCHEDULER_NAME
      - $SCHEDULER == $SRC_SCHEDULER_NAME

.template-tiki-manager-commands-svn: &template-tiki-manager-commands-svn
  <<: *template-tiki-manager-commands
  dependencies:
    - cache-warmup-tiki-svn
  needs:
    - cache-warmup-tiki-svn
  only:
    refs:
      - schedules
    variables:
      - $SCHEDULER == $SVN_SCHEDULER_NAME

.template-tiki-manager-commands-src: &template-tiki-manager-commands-src
  <<: *template-tiki-manager-commands
  dependencies:
    - download-tiki-src-files
  needs:
    - download-tiki-src-files
  only:
    refs:
      - schedules
    variables:
      - $SCHEDULER == $SRC_SCHEDULER_NAME

#----------------------------------------------------------------------------------------------------------------------#
# PACKAGE SECTION
#----------------------------------------------------------------------------------------------------------------------#

phar:
  stage: package
  script:
    - composer install $COMPOSER_FLAGS
    - composer build-phar
  allow_failure: false
  needs:
    - composer
  cache:
    <<: *composer-cache
  artifacts:
    name: tiki-manager.phar
    paths:
      - build/tiki-manager.phar
    when: on_success
  only:
    refs:
      - master
      - tags

compressed:
  stage: package
  variables:
    PACK_FILES_FOLDERS_LIST: config data scripts src vendor hooks .env.dist composer.json composer.lock LICENSE README.md tiki-manager tiki-manager.php VERSION .version
  script:
    - composer install --no-dev $COMPOSER_FLAGS
    - git log --pretty=fuller 'HEAD^..HEAD' > VERSION
    - git log --pretty="format:TIKI_MANAGER_GIT_DATE=%cd%nTIKI_MANAGER_GIT_HASH=%h" 'HEAD^..HEAD' --date="format:%Y%m%d%H%M%S" > .version
    - find ${PACK_FILES_FOLDERS_LIST} -type f -exec chmod 664 {} \;
    - find ${PACK_FILES_FOLDERS_LIST} -type d -exec chmod 775 {} \;
    - chmod 775 tiki-manager
    - tar czvf tiki-manager.tgz ${PACK_FILES_FOLDERS_LIST}
  allow_failure: false
  needs:
    - composer
  cache:
    <<: *composer-cache
  artifacts:
    name: tiki-manager.tgz
    paths:
      - tiki-manager.tgz
    when: on_success
  only:
    refs:
      - master
      - tags
  except:
    variables:
      - $SCHEDULER == "update_vendor"

#----------------------------------------------------------------------------------------------------------------------#
# MAINTENANCE SECTION
#----------------------------------------------------------------------------------------------------------------------#
update_vendor_dependencies:
  stage: vendors_update
  dependencies:
    - composer
  needs:
    - composer
  variables:
    BRANCH_NAME: "${CI_COMMIT_REF_NAME}_vendor_update"
    COMMIT_MESSAGE: "[UPD] Update ${CI_COMMIT_REF_NAME} vendor dependencies"
    CI_REPOSITORY_URL: "https://${GITLAB_USER_LOGIN}:${GITLAB_USER_TOKEN}@gitlab.com/${CI_PROJECT_PATH}.git"
    COMPOSER_DISCARD_CHANGES: "true"
    COMPOSER_NO_INTERACTION: "1"
  before_script:
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - git config --global user.name "${GITLAB_USER_NAME}"
  script:
    - composer -V | grep "version 2" || composer self-update --2
    - DATE=`date +%Y%m%d`
    - BRANCH_NAME="${BRANCH_NAME}_${DATE}"
    - php scripts/manager/update_vendor.php
    - if git diff --quiet --exit-code composer.lock; then exit 0; fi;
    - if git rev-parse --verify ${BRANCH_NAME}; then git branch -D ${BRANCH_NAME}; fi;
    - git checkout -b ${BRANCH_NAME}
    - git add composer.lock
    - git commit -m "${COMMIT_MESSAGE}"
    - git push ${CI_REPOSITORY_URL} HEAD:${BRANCH_NAME} --quiet
    - |
      HOST=${CI_PROJECT_URL} CI_PROJECT_ID=${CI_PROJECT_ID} SOURCE_BRANCH=${BRANCH_NAME} TARGET_BRANCH=${CI_COMMIT_REF_NAME} GITLAB_USER_ID=${GITLAB_USER_ID} PRIVATE_TOKEN=${GITLAB_USER_TOKEN} TARGET_PROJECT_ID=${TARGET_PROJECT_ID} SET_MERGE=${SET_MERGE} \
      /bin/bash .gitlab-ci/auto_merge_request.sh "${COMMIT_MESSAGE} (${DATE})"
  only:
    variables:
      - $SCHEDULER == "update_vendor"